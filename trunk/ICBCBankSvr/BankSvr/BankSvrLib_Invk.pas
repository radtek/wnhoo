unit BankSvrLib_Invk;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {vcl:} Classes,
  {RemObjects:} uROXMLIntf, uROServer, uROServerIntf, uROTypes, uROClientIntf,
  {Generated:} BankSvrLib_Intf;

type
  TBankService_Invoker = class(TROInvoker)
  private
  protected
  public
    constructor Create; override;
  published
    procedure Invoke_GetSvrDt(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_QueryAccValue_S(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_QueryCurDayDetails_M(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_PayEnt_S(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_QueryPayEnt_S(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_PerDis_S(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_QueryPerDis_S(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_QueryHistoryDetails_M(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
  end;

implementation

uses
  {RemObjects:} uRORes, uROClient;

{ TBankService_Invoker }

constructor TBankService_Invoker.Create;
begin
  inherited Create;
  FAbstract := False;
end;

procedure TBankService_Invoker.Invoke_GetSvrDt(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function GetSvrDt: DateTime; }
var
  lResult: DateTime;
begin
  try
    lResult := (__Instance as IBankService).GetSvrDt;

    __Message.InitializeResponseMessage(__Transport, 'BankSvrLib', 'BankService', 'GetSvrDtResponse');
    __Message.Write('Result', TypeInfo(DateTime), lResult, [paIsDateTime]);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

procedure TBankService_Invoker.Invoke_QueryAccValue_S(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function QueryAccValue_S(const fSeqno: AnsiString; const AccNo0: AnsiString; var rtCode: AnsiString; var rtMsg: AnsiString; var rtStr: AnsiString): Boolean; }
var
  fSeqno: AnsiString;
  AccNo0: AnsiString;
  rtCode: AnsiString;
  rtMsg: AnsiString;
  rtStr: AnsiString;
  lResult: Boolean;
begin
  try
    __Message.Read('fSeqno', TypeInfo(AnsiString), fSeqno, []);
    __Message.Read('AccNo0', TypeInfo(AnsiString), AccNo0, []);
    __Message.Read('rtCode', TypeInfo(AnsiString), rtCode, []);
    __Message.Read('rtMsg', TypeInfo(AnsiString), rtMsg, []);
    __Message.Read('rtStr', TypeInfo(AnsiString), rtStr, []);

    lResult := (__Instance as IBankService).QueryAccValue_S(fSeqno, AccNo0, rtCode, rtMsg, rtStr);

    __Message.InitializeResponseMessage(__Transport, 'BankSvrLib', 'BankService', 'QueryAccValue_SResponse');
    __Message.Write('Result', TypeInfo(Boolean), lResult, []);
    __Message.Write('rtCode', TypeInfo(AnsiString), rtCode, []);
    __Message.Write('rtMsg', TypeInfo(AnsiString), rtMsg, []);
    __Message.Write('rtStr', TypeInfo(AnsiString), rtStr, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

procedure TBankService_Invoker.Invoke_QueryCurDayDetails_M(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function QueryCurDayDetails_M(const fSeqno: AnsiString; const AccNo: AnsiString; var NextTag: AnsiString; var rtCode: AnsiString; var rtMsg: AnsiString; 
                                  var rtStr: AnsiString): Boolean; }
var
  fSeqno: AnsiString;
  AccNo: AnsiString;
  NextTag: AnsiString;
  rtCode: AnsiString;
  rtMsg: AnsiString;
  rtStr: AnsiString;
  lResult: Boolean;
begin
  try
    __Message.Read('fSeqno', TypeInfo(AnsiString), fSeqno, []);
    __Message.Read('AccNo', TypeInfo(AnsiString), AccNo, []);
    __Message.Read('NextTag', TypeInfo(AnsiString), NextTag, []);
    __Message.Read('rtCode', TypeInfo(AnsiString), rtCode, []);
    __Message.Read('rtMsg', TypeInfo(AnsiString), rtMsg, []);
    __Message.Read('rtStr', TypeInfo(AnsiString), rtStr, []);

    lResult := (__Instance as IBankService).QueryCurDayDetails_M(fSeqno, AccNo, NextTag, rtCode, rtMsg, rtStr);

    __Message.InitializeResponseMessage(__Transport, 'BankSvrLib', 'BankService', 'QueryCurDayDetails_MResponse');
    __Message.Write('Result', TypeInfo(Boolean), lResult, []);
    __Message.Write('NextTag', TypeInfo(AnsiString), NextTag, []);
    __Message.Write('rtCode', TypeInfo(AnsiString), rtCode, []);
    __Message.Write('rtMsg', TypeInfo(AnsiString), rtMsg, []);
    __Message.Write('rtStr', TypeInfo(AnsiString), rtStr, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

procedure TBankService_Invoker.Invoke_PayEnt_S(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function PayEnt_S(const fSeqno: AnsiString; const RecAccNo: AnsiString; const RecAccNameCN: AnsiString; const PayAmt: AnsiString; 
                      const UseCN: AnsiString; const PostScript: AnsiString; const Summary: AnsiString; var rtCode: AnsiString; 
                      var rtMsg: AnsiString; var rtStr: AnsiString): Boolean; }
var
  fSeqno: AnsiString;
  RecAccNo: AnsiString;
  RecAccNameCN: AnsiString;
  PayAmt: AnsiString;
  UseCN: AnsiString;
  PostScript: AnsiString;
  Summary: AnsiString;
  rtCode: AnsiString;
  rtMsg: AnsiString;
  rtStr: AnsiString;
  lResult: Boolean;
begin
  try
    __Message.Read('fSeqno', TypeInfo(AnsiString), fSeqno, []);
    __Message.Read('RecAccNo', TypeInfo(AnsiString), RecAccNo, []);
    __Message.Read('RecAccNameCN', TypeInfo(AnsiString), RecAccNameCN, []);
    __Message.Read('PayAmt', TypeInfo(AnsiString), PayAmt, []);
    __Message.Read('UseCN', TypeInfo(AnsiString), UseCN, []);
    __Message.Read('PostScript', TypeInfo(AnsiString), PostScript, []);
    __Message.Read('Summary', TypeInfo(AnsiString), Summary, []);
    __Message.Read('rtCode', TypeInfo(AnsiString), rtCode, []);
    __Message.Read('rtMsg', TypeInfo(AnsiString), rtMsg, []);
    __Message.Read('rtStr', TypeInfo(AnsiString), rtStr, []);

    lResult := (__Instance as IBankService).PayEnt_S(fSeqno, RecAccNo, RecAccNameCN, PayAmt, UseCN, PostScript, Summary, rtCode, rtMsg, rtStr);

    __Message.InitializeResponseMessage(__Transport, 'BankSvrLib', 'BankService', 'PayEnt_SResponse');
    __Message.Write('Result', TypeInfo(Boolean), lResult, []);
    __Message.Write('rtCode', TypeInfo(AnsiString), rtCode, []);
    __Message.Write('rtMsg', TypeInfo(AnsiString), rtMsg, []);
    __Message.Write('rtStr', TypeInfo(AnsiString), rtStr, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

procedure TBankService_Invoker.Invoke_QueryPayEnt_S(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function QueryPayEnt_S(const fSeqno: AnsiString; const QryfSeqno: AnsiString; var rtCode: AnsiString; var rtMsg: AnsiString; 
                           var rtStr: AnsiString): Boolean; }
var
  fSeqno: AnsiString;
  QryfSeqno: AnsiString;
  rtCode: AnsiString;
  rtMsg: AnsiString;
  rtStr: AnsiString;
  lResult: Boolean;
begin
  try
    __Message.Read('fSeqno', TypeInfo(AnsiString), fSeqno, []);
    __Message.Read('QryfSeqno', TypeInfo(AnsiString), QryfSeqno, []);
    __Message.Read('rtCode', TypeInfo(AnsiString), rtCode, []);
    __Message.Read('rtMsg', TypeInfo(AnsiString), rtMsg, []);
    __Message.Read('rtStr', TypeInfo(AnsiString), rtStr, []);

    lResult := (__Instance as IBankService).QueryPayEnt_S(fSeqno, QryfSeqno, rtCode, rtMsg, rtStr);

    __Message.InitializeResponseMessage(__Transport, 'BankSvrLib', 'BankService', 'QueryPayEnt_SResponse');
    __Message.Write('Result', TypeInfo(Boolean), lResult, []);
    __Message.Write('rtCode', TypeInfo(AnsiString), rtCode, []);
    __Message.Write('rtMsg', TypeInfo(AnsiString), rtMsg, []);
    __Message.Write('rtStr', TypeInfo(AnsiString), rtStr, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

procedure TBankService_Invoker.Invoke_PerDis_S(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function PerDis_S(const fSeqno: AnsiString; const PayAccNo: AnsiString; const PayAccNameCN: AnsiString; const Portno: AnsiString; 
                      const ContractNo: AnsiString; const PayAmt: AnsiString; const UseCN: AnsiString; const PostScript: AnsiString; 
                      const Summary: AnsiString; var rtCode: AnsiString; var rtMsg: AnsiString; var rtStr: AnsiString): Boolean; }
var
  fSeqno: AnsiString;
  PayAccNo: AnsiString;
  PayAccNameCN: AnsiString;
  Portno: AnsiString;
  ContractNo: AnsiString;
  PayAmt: AnsiString;
  UseCN: AnsiString;
  PostScript: AnsiString;
  Summary: AnsiString;
  rtCode: AnsiString;
  rtMsg: AnsiString;
  rtStr: AnsiString;
  lResult: Boolean;
begin
  try
    __Message.Read('fSeqno', TypeInfo(AnsiString), fSeqno, []);
    __Message.Read('PayAccNo', TypeInfo(AnsiString), PayAccNo, []);
    __Message.Read('PayAccNameCN', TypeInfo(AnsiString), PayAccNameCN, []);
    __Message.Read('Portno', TypeInfo(AnsiString), Portno, []);
    __Message.Read('ContractNo', TypeInfo(AnsiString), ContractNo, []);
    __Message.Read('PayAmt', TypeInfo(AnsiString), PayAmt, []);
    __Message.Read('UseCN', TypeInfo(AnsiString), UseCN, []);
    __Message.Read('PostScript', TypeInfo(AnsiString), PostScript, []);
    __Message.Read('Summary', TypeInfo(AnsiString), Summary, []);
    __Message.Read('rtCode', TypeInfo(AnsiString), rtCode, []);
    __Message.Read('rtMsg', TypeInfo(AnsiString), rtMsg, []);
    __Message.Read('rtStr', TypeInfo(AnsiString), rtStr, []);

    lResult := (__Instance as IBankService).PerDis_S(fSeqno, PayAccNo, PayAccNameCN, Portno, ContractNo, PayAmt, UseCN, PostScript, Summary, rtCode, rtMsg, 
        rtStr);

    __Message.InitializeResponseMessage(__Transport, 'BankSvrLib', 'BankService', 'PerDis_SResponse');
    __Message.Write('Result', TypeInfo(Boolean), lResult, []);
    __Message.Write('rtCode', TypeInfo(AnsiString), rtCode, []);
    __Message.Write('rtMsg', TypeInfo(AnsiString), rtMsg, []);
    __Message.Write('rtStr', TypeInfo(AnsiString), rtStr, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

procedure TBankService_Invoker.Invoke_QueryPerDis_S(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function QueryPerDis_S(const fSeqno: AnsiString; const QryfSeqno: AnsiString; var rtCode: AnsiString; var rtMsg: AnsiString; 
                           var rtStr: AnsiString): Boolean; }
var
  fSeqno: AnsiString;
  QryfSeqno: AnsiString;
  rtCode: AnsiString;
  rtMsg: AnsiString;
  rtStr: AnsiString;
  lResult: Boolean;
begin
  try
    __Message.Read('fSeqno', TypeInfo(AnsiString), fSeqno, []);
    __Message.Read('QryfSeqno', TypeInfo(AnsiString), QryfSeqno, []);
    __Message.Read('rtCode', TypeInfo(AnsiString), rtCode, []);
    __Message.Read('rtMsg', TypeInfo(AnsiString), rtMsg, []);
    __Message.Read('rtStr', TypeInfo(AnsiString), rtStr, []);

    lResult := (__Instance as IBankService).QueryPerDis_S(fSeqno, QryfSeqno, rtCode, rtMsg, rtStr);

    __Message.InitializeResponseMessage(__Transport, 'BankSvrLib', 'BankService', 'QueryPerDis_SResponse');
    __Message.Write('Result', TypeInfo(Boolean), lResult, []);
    __Message.Write('rtCode', TypeInfo(AnsiString), rtCode, []);
    __Message.Write('rtMsg', TypeInfo(AnsiString), rtMsg, []);
    __Message.Write('rtStr', TypeInfo(AnsiString), rtStr, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

procedure TBankService_Invoker.Invoke_QueryHistoryDetails_M(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function QueryHistoryDetails_M(const fSeqno: AnsiString; const AccNo: AnsiString; const BeginDate: AnsiString; const EndDate: AnsiString; 
                                   var NextTag: AnsiString; var rtCode: AnsiString; var rtMsg: AnsiString; var rtStr: AnsiString): Boolean; }
var
  fSeqno: AnsiString;
  AccNo: AnsiString;
  BeginDate: AnsiString;
  EndDate: AnsiString;
  NextTag: AnsiString;
  rtCode: AnsiString;
  rtMsg: AnsiString;
  rtStr: AnsiString;
  lResult: Boolean;
begin
  try
    __Message.Read('fSeqno', TypeInfo(AnsiString), fSeqno, []);
    __Message.Read('AccNo', TypeInfo(AnsiString), AccNo, []);
    __Message.Read('BeginDate', TypeInfo(AnsiString), BeginDate, []);
    __Message.Read('EndDate', TypeInfo(AnsiString), EndDate, []);
    __Message.Read('NextTag', TypeInfo(AnsiString), NextTag, []);
    __Message.Read('rtCode', TypeInfo(AnsiString), rtCode, []);
    __Message.Read('rtMsg', TypeInfo(AnsiString), rtMsg, []);
    __Message.Read('rtStr', TypeInfo(AnsiString), rtStr, []);

    lResult := (__Instance as IBankService).QueryHistoryDetails_M(fSeqno, AccNo, BeginDate, EndDate, NextTag, rtCode, rtMsg, rtStr);

    __Message.InitializeResponseMessage(__Transport, 'BankSvrLib', 'BankService', 'QueryHistoryDetails_MResponse');
    __Message.Write('Result', TypeInfo(Boolean), lResult, []);
    __Message.Write('NextTag', TypeInfo(AnsiString), NextTag, []);
    __Message.Write('rtCode', TypeInfo(AnsiString), rtCode, []);
    __Message.Write('rtMsg', TypeInfo(AnsiString), rtMsg, []);
    __Message.Write('rtStr', TypeInfo(AnsiString), rtStr, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

initialization
end.
